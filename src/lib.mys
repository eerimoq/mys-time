c"""source-before-namespace
#include <ctime>
"""

class TimeError(Error):
    message: string

class Time:
    """Time in seconds and nanoseconds.

    """

    seconds: i64
    nanoseconds: i32

    def __iadd__(self, other: Time):
        self.seconds += other.seconds
        self.nanoseconds += other.nanoseconds

        if self.nanoseconds >= 1_000_000_000:
            self.seconds += 1
            self.nanoseconds -= 1_000_000_000

    def __isub__(self, other: Time):
        self.seconds -= other.seconds
        self.nanoseconds -= other.nanoseconds

        if self.nanoseconds < 0:
            self.seconds -= 1
            self.nanoseconds += 1_000_000_000

class DateTime:
    """Date and time.

    """

    year: i32
    month: u8
    day: u8
    hour: u8
    minute: u8
    second: u8

    def __init__(self, time: Time):
        """Create a DateTime object from given UTC time.

        """

        ok = False

        c"""
        std::time_t t;
        std::tm *tm;

        t = time->seconds;
        tm = std::gmtime(&t);

        if (tm != NULL) {
            year = 1900 + tm->tm_year;
            month = tm->tm_mon + 1;
            day = tm->tm_mday;
            hour = tm->tm_hour;
            minute = tm->tm_min;
            second = tm->tm_sec;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

    def to_time(self) -> Time:
        """Create a Time object in UTC from this date and time.

        """

        time = Time(0, 0)
        ok = False

        c"""
        struct tm tm;
        tm.tm_year = year - 1900;
        tm.tm_mon = month - 1;
        tm.tm_mday = day;
        tm.tm_hour = hour;
        tm.tm_min = minute;
        tm.tm_sec = second;

        time_t t = timegm(&tm);

        if (t != -1) {
            time->seconds = t;
            time->nanoseconds = 0;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

        return time

    def __str__(self) -> string:
        # ToDo: Fixed width when format string support it (or workaround).
        return (f"{self.year}-{self.month}-{self.day} "
                f"{self.hour}:{self.minute}:{self.second}")

@test
def test_time():
    time = Time(5, 1)
    assert time.seconds == 5
    assert time.nanoseconds == 1

@test
def test_datetime_from_time_epoch():
    datetime = DateTime(Time(0, 0))
    assert datetime.year == 1970
    assert datetime.month == 1
    assert datetime.day == 1
    assert datetime.hour == 0
    assert datetime.minute == 0
    assert datetime.second == 0

@test
def test_datetime_from_time_now():
    datetime = DateTime(Time(1615130879, 0))
    assert datetime.year == 2021
    assert datetime.month == 3
    assert datetime.day == 7
    assert datetime.hour == 15
    assert datetime.minute == 27
    assert datetime.second == 59

@test
def test_add_times():
    t = Time(10, 0)

    t += Time(1, 0)
    assert t.seconds == 11
    assert t.nanoseconds == 0

    t += Time(0, 1_000_000)
    assert t.seconds == 11
    assert t.nanoseconds == 1_000_000

    t += Time(0, 999_000_001)
    assert t.seconds == 12
    assert t.nanoseconds == 1

@test
def test_subtract_times():
    t = Time(10, 0)

    t -= Time(1, 0)
    assert t.seconds == 9
    assert t.nanoseconds == 0

    t -= Time(0, 1_000_000)
    assert t.seconds == 8
    assert t.nanoseconds == 999_000_000

    t -= Time(0, 999_000_001)
    assert t.seconds == 7
    assert t.nanoseconds == 999_999_999

@test
def test_datetime_string():
    dt = DateTime(Time(182600000, 0))
    assert str(dt) == "1975-10-15 10:13:20"

    dt = DateTime(Time(0, 0))
    assert str(dt) == "1970-1-1 0:0:0"

    dt = DateTime(Time(-1, 0))
    assert str(dt) == "1969-12-31 23:59:59"

@test
def test_datetime_to_time():
    t = DateTime(Time(0, 0)).to_time()
    assert t.seconds == 0
    assert t.nanoseconds == 0

    t = DateTime(Time(1615130879, 0)).to_time()
    assert t.seconds == 1615130879
    assert t.nanoseconds == 0
